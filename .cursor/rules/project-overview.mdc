---
alwaysApply: true
---

# MCBuddy Bot - Project Overview ü§ñ

## Project Information
- **Full Name**: MCBuddy Bot
- **Short Name**: mcbuddy-bot
- **Description**: Telegram-–±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å MCBuddy ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π –æ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞–π –ø–æ–Ω—è—Ç–Ω—ã–µ, —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã! üì±

## Technical Specifications
- **TypeScript Version**: 5.0+
- **Runtime**: Bun 1.0+
- **Main File**: src/index.ts
- **Architecture**: Modular TypeScript application with feature-based structure

## Technology Stack
- **Language**: TypeScript
- **Runtime**: Bun.js
- **Telegram API**: node-telegram-bot-api
- **Logging**: tslog (structured logging)
- **Markdown Processing**: telegramify-markdown
- **Containerization**: Docker, docker-compose

## Core Features
- **Command /ask** ‚Äî –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ Minecraft –∏ –ø–æ–ª—É—á–∞–π AI-–æ—Ç–≤–µ—Ç—ã —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- **Direct Messages** ‚Äî –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –±–µ–∑ –∫–æ–º–∞–Ω–¥, –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
- **Visual Feedback** ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
- **Russian Interface** ‚Äî –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

## Integrations
- **MCBuddy Server API** ‚Äî –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±—ç–∫–µ–Ω–¥–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI-–æ—Ç–≤–µ—Ç–æ–≤
- **OpenRouter** ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ X-OpenRouter-Token
- **Telegram Bot API** ‚Äî –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram

## Core Modules
- **application**: Application initialization and configuration
- **features/ask**: Question processing and interaction with MCBuddy Server
- **telegram**: Telegram Bot API logic and message handling
- **shared**: Common utilities (error handling, logging)

## Key Entry Points
- **Main File**: [src/index.ts](mdc:src/index.ts)
- **Entry Point**: [src/application/entrypoint.ts](mdc:src/application/entrypoint.ts)
- **Telegram Handler**: [src/telegram/handler.ts](mdc:src/telegram/handler.ts)
- **Ask Service**: [src/features/ask/ask.service.ts](mdc:src/features/ask/ask.service.ts)

## Architectural Principles
- **Pattern**: Feature-based modular architecture
- **Structure**: Organized by features and shared utilities
- **Type Safety**: Strong TypeScript typing throughout
- **Logging**: Structured logging with tslog
- **Error Handling**: Centralized error handling with user-friendly messages
